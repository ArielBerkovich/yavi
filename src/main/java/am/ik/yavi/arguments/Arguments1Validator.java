/*
 * Copyright (C) 2018-2021 Toshiaki Maki <makingx@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package am.ik.yavi.arguments;

import java.util.Locale;

import am.ik.yavi.core.ConstraintGroup;
import am.ik.yavi.core.ConstraintViolationsException;
import am.ik.yavi.core.Validated;
import am.ik.yavi.core.Validator;
import am.ik.yavi.fn.Function1;

/**
 * Generated by https://github.com/making/yavi/blob/develop/scripts/generate-args.sh
 *
 * @since 0.3.0
 */
public final class Arguments1Validator<A1, X> {
	private final Validator<Arguments1<A1>> validator;
	private final Function1<? super A1, ? extends X> mapper;

	public Arguments1Validator(Validator<Arguments1<A1>> validator,
			Function1<? super A1, ? extends X> mapper) {
		this.validator = validator;
		this.mapper = mapper;
	}

	public Validated<X> validate(A1 a1) {
		return this.validator.applicative()
				.validate(Arguments.of(a1), Locale.getDefault(), ConstraintGroup.DEFAULT)
				.map(values -> values.map(this.mapper));
	}

	public Validated<X> validate(A1 a1, ConstraintGroup constraintGroup) {
		return this.validator.applicative()
				.validate(Arguments.of(a1), Locale.getDefault(), constraintGroup)
				.map(values -> values.map(this.mapper));
	}

	public Validated<X> validate(A1 a1, Locale locale) {
		return this.validator.applicative()
				.validate(Arguments.of(a1), locale, ConstraintGroup.DEFAULT)
				.map(values -> values.map(this.mapper));
	}

	public Validated<X> validate(A1 a1, Locale locale, ConstraintGroup constraintGroup) {
		return this.validator.applicative()
				.validate(Arguments.of(a1), locale, constraintGroup)
				.map(values -> values.map(this.mapper));
	}

	/**
	 * Use {@link #validate(Object)} instead
	 */
	@Deprecated
	public Validated<X> validateArgs(A1 a1) {
		return this.validator.applicative()
				.validate(Arguments.of(a1), Locale.getDefault(), ConstraintGroup.DEFAULT)
				.map(values -> values.map(this.mapper));
	}

	/**
	 * Use {@link #validate(Object, ConstraintGroup)} instead
	 */
	@Deprecated
	public Validated<X> validateArgs(A1 a1, ConstraintGroup constraintGroup) {
		return this.validator.applicative()
				.validate(Arguments.of(a1), Locale.getDefault(), constraintGroup)
				.map(values -> values.map(this.mapper));
	}

	/**
	 * Use {@link #validate(Object, Locale)} instead
	 */
	@Deprecated
	public Validated<X> validateArgs(A1 a1, Locale locale) {
		return this.validator.applicative()
				.validate(Arguments.of(a1), locale, ConstraintGroup.DEFAULT)
				.map(values -> values.map(this.mapper));
	}

	/**
	 * Use {@link #validate(Object, Locale, ConstraintGroup)} instead
	 */
	@Deprecated
	public Validated<X> validateArgs(A1 a1, Locale locale,
			ConstraintGroup constraintGroup) {
		return this.validator.applicative()
				.validate(Arguments.of(a1), locale, constraintGroup)
				.map(values -> values.map(this.mapper));
	}

	public void validateAndThrowIfInvalid(A1 a1) {
		this.validator.validate(Arguments.of(a1))
				.throwIfInvalid(ConstraintViolationsException::new);
	}

	public void validateAndThrowIfInvalid(A1 a1, ConstraintGroup constraintGroup) {
		this.validator.validate(Arguments.of(a1), constraintGroup)
				.throwIfInvalid(ConstraintViolationsException::new);
	}

	public X validated(A1 a1) throws ConstraintViolationsException {
		return this.validate(a1).orElseThrow(ConstraintViolationsException::new);
	}

	public X validated(A1 a1, ConstraintGroup constraintGroup)
			throws ConstraintViolationsException {
		return this.validate(a1, constraintGroup)
				.orElseThrow(ConstraintViolationsException::new);
	}

	public X validated(A1 a1, Locale locale) throws ConstraintViolationsException {
		return this.validate(a1, locale).orElseThrow(ConstraintViolationsException::new);
	}

	public X validated(A1 a1, Locale locale, ConstraintGroup constraintGroup)
			throws ConstraintViolationsException {
		return this.validate(a1, locale, constraintGroup)
				.orElseThrow(ConstraintViolationsException::new);
	}
}
